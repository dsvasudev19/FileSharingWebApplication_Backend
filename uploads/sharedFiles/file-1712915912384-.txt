require("dotenv").config();
const express = require("express");
const cors = require("cors");
const nodemailer = require("nodemailer");
const {Property}=require("./src/models")
const {sequelize} = require("./src/models");

const swaggerJsdoc = require("swagger-jsdoc");
const swaggerUi = require("swagger-ui-express");

const routes = require("./src/routes");
const adminRoutes = require("./src/routes/adminRoutes");
const process = require("process");
const cwd = process.cwd();
const _ = require("lodash");

const {VendorEnquiry} = require('./src/models')
const cookieParser = require('cookie-parser');
const authMiddleware = require('./src/middlewares/authMiddleware');
const {default: slugify} = require("slugify");


const environment = process.env.NODE_ENV || "development"; // development

const app = express();
const PORT = process.env.PORT || 3000;


var corsOptions = {
  origin: [
    "http://localhost:3011",
    "http://localhost:3000",
    "http://localhost:5173",
    "https://solitary-holydays-admin-react.vercel.app",
    "https://solitary-holydays-frontend-react.vercel.app",
    "https://solitaryholydays.in",
    "https://www.solitaryholydays.in",
    "https://admin.solitaryholydays.in",
    "https://site.solitaryholydays.in"
  ],
  credentials: true,
  allowedHeaders: "Content-Type,Authorization,Set-Cookie",
};
app.use(express.static("./uploads"));
app.use(cors(corsOptions));
app.use(cookieParser());
app.use(express.json());
app.use(express.urlencoded({extended: true}));

app.get("/", (req, res) => {
  res.send("Backend is running");
});

app.get("/hh", (req, res) => {
  const transporter = nodemailer.createTransport({
    host: "premium209.web-hosting.com",
    secure: true,
    port: 465,
    auth: {
      user: 'info@solitaryholydays.in',
      pass: 'RN-(d[c-PGQw',
    },
  });

  const emailTemplate = `
  <html>
    <body>
      <h1>Hello,</h1>
      <p>asdasdfsdf</P>
    </body>
  </html>
`;
  try {
    // Send email
    transporter.sendMail({
      from: "info@solitaryholydays.in",
      to: "kamalspack@gmail.com",
      subject: "hello",
      html: "<p>HTML version of the message</p>",
    });
    res.send(info.messageId);
  } catch (error) {
    res.send(error);
  }

})
// app.use(caslMiddleware);

const options = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "Your API",
      version: "1.0.0",
      description: "Documentation of Solitary Holidays API",
      contact: {
        name: "Solitary Holidays Developers",
        email: "developer@SolitaryHolidays.com",
      },
    },
    servers: [
      {
        url: "http://localhost:3000/v1/", // Update with your actual server URL
        description: "Local development server",
      },
      {
        url: "https://api.example.com/v1", // Update with your actual server URL
        description: "Production server",
      },
      {
        url: "http://localhost:3000/v1/", // Update with your actual server URL
        description: "Local development server for v1",
      },
      // Add more servers for different environments if needed
    ],
  },
  // apis: ['server.js'],
  apis: [
    "server.js",
    "src/controllers/*.js",
    "src/routes/*.js",
    "src/routes/admin/*.js",
    'src/controllers/Admin/*.js',
  ]
};

const specs = swaggerJsdoc(options);

app.use("/apidocs", swaggerUi.serve, swaggerUi.setup(specs));

app.use("/v1", routes);

app.use("/v1/admin", adminRoutes);

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  console.log(err.message);
  const statusCode = err.status || 500;
  res.status(statusCode).json({
    success: false,
    error: {code: statusCode, message: "Something went wrong!", err},
  });
});


app.post("/v1/become-an-host", async (req, res, next) => {
  try {

    const hostFound = await VendorEnquiry.findOne({where: {email: req.body.email}});
    if (hostFound) {
      return res.status(400).json({success: false, message: "You have already submitted an enquiry"});
    }


    const newHost = await VendorEnquiry.create({...req.body, status: -1});
    if (newHost) {

      res.status(200).json({success: true, message: "Success", data: req.body}).send();
    } else {
      return res.status(400).json({success: false, message: "Unable to create an Enquiry"}).send();
    }
  } catch (error) {

    console.log(error);
    next(error)
  }
})

app.get('/update-slugs',async (req,res,next)=>{
  const properties=await Property.findAll();
  properties.forEach(async (property)=>{
    console.log(property.title.toLowerCase());
    const slug=slugify((property.title).toLowerCase());
    property.slug=slug;
    await property.save();
  })
})

// Sync the database and start the server
sequelize.sync({force: false}).then(() => {
  app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${ PORT }`);
  });
});
